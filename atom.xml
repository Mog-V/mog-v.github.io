<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mog&#39;s Blog</title>
  <subtitle>Swift开发者</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.mog.name/"/>
  <updated>2016-05-16T01:26:47.000Z</updated>
  <id>http://blog.mog.name/</id>
  
  <author>
    <name>Mog</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ReactiveCocoa系列教程2-配置和使用</title>
    <link href="http://blog.mog.name/2016/05/16/ReactiveCocoa%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B2-%E9%85%8D%E7%BD%AE%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
    <id>http://blog.mog.name/2016/05/16/ReactiveCocoa系列教程2-配置和使用/</id>
    <published>2016-05-16T01:23:06.000Z</published>
    <updated>2016-05-16T01:26:47.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;在编写iOS代码时，我们的大部分代码都是在响应一些事件：按钮点击、接收网络消息、属性变化等等。但是这些事件在代码中的表现形式却不一样：如target-action、代理方法、KVO、回调或其它。ReactiveCocoa的目的就是定义一个统一的事件处理接口，这样它们可以非常简单地进行链接、过滤和组合。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ReactiveCocoa结合了一些编程模式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;函数式编程：利用高阶函数，即将函数作为其它函数的参数。&lt;/li&gt;
&lt;li&gt;响应式编程：关注于数据流及变化的传播。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;基于以上两点，ReactiveCocoa被当成是函数响应编程(Functional Reactive Programming, FRP)框架。我们将在下面以实例来看看ReactiveCocoa的实用价值。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;添加ReactiveCocoa框架&quot;&gt;&lt;a href=&quot;#添加ReactiveCocoa框架&quot; class=&quot;headerlink&quot; title=&quot;添加ReactiveCocoa框架&quot;&gt;&lt;/a&gt;添加ReactiveCocoa框架&lt;/h2&gt;&lt;p&gt;添加ReactiveCocoa框架到我们工程的最简单的方法是使用Cocoapods。我们先关闭ReactivePlayground工程。Cocoapods会创建一个Xcode workspace，它会替代我们的原始工程文件。&lt;br&gt;首先创建一个名为Podfile的空文件，打开并添加如下信息：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;source &amp;apos;https://github.com/CocoaPods/Specs.git&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;platform :ios, &amp;apos;8.0&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;use_frameworks!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pod &amp;apos;ReactiveCocoa&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;配置完成后保存文件，打开终端并转到工程所在目录，然后输入以下命令：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pod install --verboser --no-repo-update&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;安装完成后，Cocoapods会创建了一个Xcode workspace，同时将框架整合到了我们的工程中。打开新生成的workspace文件(RWReactivePlayground.xcworkspace)，双击运行workspace打开工程&lt;br&gt;如果&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 注意：swift安装好pod第三方库之后一般需要手动添加相应的.framework;添加位置在工程的general &amp;gt; Linked Frameworks and Libraries 或者在 Build Phasses &amp;gt; Link Binary With Libraries | 如下图： &lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;http://7xr4xo.com1.z0.glb.clouddn.com/2016-04-16-QQ20160416-1@2x.png&quot; alt=&quot;QQ20160416-1@2x&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://7xr4xo.com1.z0.glb.clouddn.com/2016-04-16-QQ20160416-2@2x.png&quot; alt=&quot;QQ20160416-2@2x&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://7xr4xo.com1.z0.glb.clouddn.com/2016-04-16-QQ20160416-3@2x.png&quot; alt=&quot;QQ20160416-3@2x&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;开始使用&quot;&gt;&lt;a href=&quot;#开始使用&quot; class=&quot;headerlink&quot; title=&quot;开始使用&quot;&gt;&lt;/a&gt;开始使用&lt;/h2&gt;&lt;p&gt;经过上面的步骤，我们的环境应该已经搭建完成了。&lt;br&gt;接下来开始使用ReactiveCocoa&lt;br&gt;首先打开我们默认的ViewController.swift，在顶部引用ReactiveCocoa库&lt;br&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; ReactiveCocoa&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后我们在viewdidload中创建一个TextField,并且使用ReactiveCocoa监听textfiled值变化事件&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.viewDidLoad()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; tv1 = &lt;span class=&quot;type&quot;&gt;UITextField&lt;/span&gt;(frame: &lt;span class=&quot;type&quot;&gt;CGRect&lt;/span&gt;(x: &lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;, y: &lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;, width: &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;, height: &lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        tv1.backgroundColor = &lt;span class=&quot;type&quot;&gt;UIColor&lt;/span&gt;(red: &lt;span class=&quot;number&quot;&gt;0.9&lt;/span&gt;, green: &lt;span class=&quot;number&quot;&gt;0.9&lt;/span&gt;, blue: &lt;span class=&quot;number&quot;&gt;0.9&lt;/span&gt;, alpha: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        tv1.placeholder = &lt;span class=&quot;string&quot;&gt;&quot;用户名&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        view.addSubview(tv1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        tv1.rac_textSignal().subscribeNext &amp;#123; (text) &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(text)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;运行程序，我们会看到输出结果（我们每一个输入键入后都会调用到这个事件，并且返回当前textfield的值）：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;D&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;Ds&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;Dsa&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;Dsad&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;Dsada&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;Dsadas&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;Dsadasd&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;Dsadasds&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;Dsadasdsa&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们可以看到，每次在text field中输入时，都会执行block中的代码。没有target-action，没有代理，只有信号与block。是不是很棒？&lt;br&gt;ReactiveCocoa信号发送一个事件流到它们的订阅者中。我们需要知道三种类型的事件：next, error和completed。一个信号可能由于error事件或completed事件而终止，在此之前它会发送很多个next事件。在这一部分中，我们将重点关注next事件。在学习关于error和completed事件前，请仔细阅读第二部分。&lt;br&gt;RACSignal有许多方法用于订阅这些不同的事件类型。每个方法会有一个或多个block，每个block执行不同的逻辑处理。在上面这个例子中，我们看到subscribeNext:方法提供了一个响应next事件的block。&lt;br&gt;ReactiveCocoa框架通过类别来为大部分标准UIKit控件添加信号，以便这些控件可以添加其相应事件的订阅，如上面的UITextField包含了rac_textSignal属性。&lt;br&gt;理论讲得差不多了，我们继续吧！！！&lt;/p&gt;
&lt;p&gt;ReactiveCocoa有大量的操作右用于处理事件流。例如，如果我们只对长度大于3的用户名感兴趣，则我们可以使用filter操作。在viewDidLoad中更新我们的代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;tv1.rac_textSignal().&lt;span class=&quot;built_in&quot;&gt;filter&lt;/span&gt; &amp;#123; (text) -&amp;gt; &lt;span class=&quot;type&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; text.lengthOfBytesUsingEncoding(&lt;span class=&quot;type&quot;&gt;NSUTF8StringEncoding&lt;/span&gt;) &amp;gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; .subscribeNext &amp;#123; (text) &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(text)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;运行并在用户名输入框中输入”reactive cocoa”，我们可以看到控制台会有如下输出：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;reac&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;react&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;reacti&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;reactiv&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;reactive&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;reactive&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;reactive c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;reactive co&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;reactive coc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;reactive coco&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;reactive cocoa&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以看到当长度小于3时，并不执行后续的操作。通过这种方式，我们创建了一个简单的管道。这就是响应式编程的实质，我们将我们程序的功能表示为数据流的形式。我们可以将上述调用表示为以下图例：&lt;br&gt;&lt;img src=&quot;http://cdn4.raywenderlich.com/wp-content/uploads/2014/01/FilterPipeline.png&quot; alt=&quot;图片示例&quot;&gt;&lt;br&gt;从上图中我们可以看到rac_textSignal是事件的初始源头。通过filter的数据流只有在其长度大于3时，才会被传递到下一处理流程中。管道的最后一步是subscribeNext:，在这个block中，我们记录日志。&lt;br&gt;在这里需要注意的是filter操作的输出仍然是一个RACSignal对象。我们可以将上面这段管道处理拆分成如下代码：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; usernameSourceSignal = tv1.rac_textSignal();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; filteredUsername = usernameSourceSignal.&lt;span class=&quot;built_in&quot;&gt;filter&lt;/span&gt; &amp;#123; (text) -&amp;gt; &lt;span class=&quot;type&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; text.lengthOfBytesUsingEncoding(&lt;span class=&quot;type&quot;&gt;NSUTF8StringEncoding&lt;/span&gt;) &amp;gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        filteredUsername.subscribeNext &amp;#123; (text) &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(text)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;因为RACSignal对象的每个操作都返回一个RACSignal对象，所以我们不需要使用变量就可以构建一个管道。&lt;/p&gt;
&lt;h2 id=&quot;事件是什么&quot;&gt;&lt;a href=&quot;#事件是什么&quot; class=&quot;headerlink&quot; title=&quot;事件是什么&quot;&gt;&lt;/a&gt;事件是什么&lt;/h2&gt;&lt;p&gt;目前为止，我们已经描述了3种不同的事件类型，但还没有深入这些事件的结构。有趣的是，事件可以包含任何东西。为了证明这一点，我们在上面的管道中加入另一个操作。更新我们的代码：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;tv1.rac_textSignal().&lt;span class=&quot;built_in&quot;&gt;map&lt;/span&gt; &amp;#123; (text) -&amp;gt; &lt;span class=&quot;type&quot;&gt;AnyObject&lt;/span&gt;! &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; text.lengthOfBytesUsingEncoding(&lt;span class=&quot;type&quot;&gt;NSUTF8StringEncoding&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;.&lt;span class=&quot;built_in&quot;&gt;filter&lt;/span&gt; &amp;#123; (length) -&amp;gt; &lt;span class=&quot;type&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; length &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt;! &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt; &amp;gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; .subscribeNext &amp;#123; (length) &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(length)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;编译并运行，我们会发现控制台输出如下信息：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;新添加的map操作使用提供的block来转换事件数据。对于收到的每一个next事件，都会运行给定的block，并将返回值作为next事件发送。在上面的代码中，map操作获取一个NSString输入，并将其映射为一个NSNumber对象，并返回。下图演示了这个管道处理：&lt;br&gt;&lt;img src=&quot;http://cdn2.raywenderlich.com/wp-content/uploads/2014/01/FilterAndMapPipeline.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;我们可以看到，map操作后的每一步接收的都是一个NSNumber对象。我们可以使用map操作来转换我们想要的数据，只需要它是一个对象。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在编写iOS代码时，我们的大部分代码都是在响应一些事件：按钮点击、接收网络消息、属性变化等等。但是这些事件在代码中的表现形式却不一样：如target-action、代理方法、KVO、回调或其它。ReactiveCocoa的目的就是定义一个统一的事件处理接口，这样它们可以非常简单地进行链接、过滤和组合。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ReactiveCocoa结合了一些编程模式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;函数式编程：利用高阶函数，即将函数作为其它函数的参数。&lt;/li&gt;
&lt;li&gt;响应式编程：关注于数据流及变化的传播。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;基于以上两点，ReactiveCocoa被当成是函数响应编程(Functional Reactive Programming, FRP)框架。我们将在下面以实例来看看ReactiveCocoa的实用价值。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="swift" scheme="http://blog.mog.name/categories/swift/"/>
    
    
      <category term="ReactiveCocoa" scheme="http://blog.mog.name/tags/ReactiveCocoa/"/>
    
      <category term="FP" scheme="http://blog.mog.name/tags/FP/"/>
    
      <category term="FRP" scheme="http://blog.mog.name/tags/FRP/"/>
    
      <category term="函数式编程" scheme="http://blog.mog.name/tags/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    
      <category term="响应式编程" scheme="http://blog.mog.name/tags/%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    
      <category term="函数响应编程" scheme="http://blog.mog.name/tags/%E5%87%BD%E6%95%B0%E5%93%8D%E5%BA%94%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>ReactiveCocoa系列教程1-基本概念</title>
    <link href="http://blog.mog.name/2016/05/15/ReactiveCocoa%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B1-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
    <id>http://blog.mog.name/2016/05/15/ReactiveCocoa系列教程1-基本概念/</id>
    <published>2016-05-15T10:40:58.000Z</published>
    <updated>2016-05-15T12:41:41.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;此篇文章主要介绍了MVC和MVVM的区别和关系；同时阐述了有关函数式的概念；解释了ReactiveCocoa的工作原理，文章内容过于概念化，如果看不懂可以先收藏保存，看完之后的入门教程之后再回头阅读此文章大有助益&lt;br&gt;文章内容篇幅过多，所以没有将文章内实例代码一一使用swift编写；以后的教程中都将使用Swift语言进行编写&lt;br&gt;文章转载自 &lt;a href=&quot;http://yulingtianxia.com/blog/2015/05/21/ReactiveCocoa-and-MVVM-an-Introduction/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;玉令天下&lt;/a&gt;的博客 ；在此感谢&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;MVC&quot;&gt;&lt;a href=&quot;#MVC&quot; class=&quot;headerlink&quot; title=&quot;MVC&quot;&gt;&lt;/a&gt;MVC&lt;/h2&gt;&lt;p&gt;任何一个正经开发过一阵子软件的人都熟悉MVC. 它意思是Model View Controller, 是一个在复杂应用设计中组织代码的公认模式. 它也被证实在 iOS 开发中有着第二种含义: Massive View Controller(重量级视图控制器). 它让许多程序员绞尽脑汁如何去使代码被解耦和组织地让人满意. 总的来说, iOS 开发者已经得出结论: 他们需要给视图控制器瘦身, 并进一步分离事物;但该怎么做呢?&lt;/p&gt;
&lt;h2 id=&quot;MVVM&quot;&gt;&lt;a href=&quot;#MVVM&quot; class=&quot;headerlink&quot; title=&quot;MVVM&quot;&gt;&lt;/a&gt;MVVM&lt;/h2&gt;&lt;p&gt;于是MVVM流行起来, 它代表Model View View-Model, 它在这帮助我们创建更易处理, 更佳设计的代码.&lt;br&gt;有时候违背苹果建议的编码方式并不是个好做法. 我不是说不赞成这样子, 我指的是可能会弊大于利. 比如我不建议你去实现个自己的 view controller 基类并试着自己处理视图生命周期.&lt;br&gt;带着这种情绪, 我想提个问题: 使用除苹果推荐的 MVC 之外的应用设计模式是愚蠢的么?&lt;br&gt;不. 有两个原因.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;苹果没有为解决重量级试图控制器问题提供真正的指导. 他们留给我们来解决如何向代码添加更多清晰的思路. 用 MVVM 来实现这个目的想必是极好哒. (在今年 WWDC 的一些视频中, 苹果工程师在屏幕上的示例代码的确少许出现了 view-model, 不知道是否因为有它才成为了示例代码)&lt;/li&gt;
&lt;li&gt;MVVM, 至少是我将要在这里展示的 MVVM 的风格, 都跟 MVC 十分兼容. 仿佛我们将 MVC 进行到下一个逻辑步骤.&lt;br&gt;我不会提及 MVC/MVVM 的历史, 因为其他地方已经有所介绍, 并且我也不精通. 我将会关注如何用它进行 iOS/Mac 开发.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;定义-MVVM&quot;&gt;&lt;a href=&quot;#定义-MVVM&quot; class=&quot;headerlink&quot; title=&quot;定义 MVVM&quot;&gt;&lt;/a&gt;定义 MVVM&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;Model - model 在 MVVM 中没有真正的变化. 取决于你的偏好, 你的 model 可能会或可能不会封装一些额外的业务逻辑工作. 我更倾向于把它当做一个容纳表现数据-模型对象信息的结构体, 并在一个单独的管理类中维护的创建/管理模型的统一逻辑.&lt;/li&gt;
&lt;li&gt;View - view 包含实际 UI 本身(不论是 UIView 代码, storyboard 和 xib), 任何视图特定的逻辑, 和对用户输入的反馈. 在 iOS 中这不仅需要 UIView 代码和那些文件, 还包括很多需由 UIViewController 处理的工作.&lt;/li&gt;
&lt;li&gt;View-Model - 这个术语本身会带来困惑, 因为它混搭了两个我们已知的术语, 但却是完全不同的东东. 它不是传统数据-模型结构中模型的意思(又来了, 只是我喜欢这个例子). 它的职责之一就是作为一个表现视图显示自身所需数据的静态模型;但它也有收集, 解释和转换那些数据的责任. 这留给了 view (controller) 一个更加清晰明确的任务: 呈现由 view-model 提供的数据.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;关于-view-model-的更多内容&quot;&gt;&lt;a href=&quot;#关于-view-model-的更多内容&quot; class=&quot;headerlink&quot; title=&quot;关于 view-model 的更多内容&quot;&gt;&lt;/a&gt;关于 view-model 的更多内容&lt;/h3&gt;&lt;p&gt;view-model 一词的确不能充分表达我们的意图. 一个更好的术语可能是 “View Coordinator”(感谢Dave Lee提的这个 “View Coordinator” 术语, 真是个好点子). 你可以认为它就像是电视新闻主播背后的研究人员和作家团队. 它从必要的资源(数据库, 网络服务调用, 等)中获取原始数据, 运用逻辑, 并处理成 view (controller) 的展示数据. 它(通常通过属性)暴露给视图控制器需要知道的仅关于显示视图工作的信息(理想地你不会暴漏你的 data-model 对象). 它还负责对上游数据的修改(比如更新模型/数据库, API POST 调用).&lt;/p&gt;
&lt;h2 id=&quot;MVC-世界中的-MVVM&quot;&gt;&lt;a href=&quot;#MVC-世界中的-MVVM&quot; class=&quot;headerlink&quot; title=&quot;MVC 世界中的 MVVM&quot;&gt;&lt;/a&gt;MVC 世界中的 MVVM&lt;/h2&gt;&lt;p&gt;我认为 MVVM 这个首字母缩写如同 view-model 术语一样, 对如何使用它们进行 iOS 开发体现得有点不太准确. 让我们再检查下这个首字母缩写, 了解下它是怎么与 MVC 融为一体的.&lt;br&gt;为了图解表示, 我们颠倒了 MVC 中的 V 和 C, 于是首字母缩写更能准确地反映出组件间的关系方位, 给我们带来 MCV. 我也会对 MVVM 这么干, 将 V(iew) 移到 VM 的右边最终成为了 MVMV. (我相信这些首字母缩写起初不排成这样更合理的顺序是有原因的. )&lt;br&gt;这是这两种模式如何在 iOS 中组装在一起的简单映射:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xr4xo.com1.z0.glb.clouddn.com/2016-05-15-MCVMVMV.jpg&quot; alt=&quot;MCVMVMV&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我试图遵循区块尺寸(非常)大致对应它们负责的工作量.&lt;/li&gt;
&lt;li&gt;注意到视图控制器有多大?&lt;/li&gt;
&lt;li&gt;你可以看到我们巨大的视图控制器和 view-model 之间有大块工作上的重合.&lt;/li&gt;
&lt;li&gt;你也可以看看视图控制器在 MVVM 中的足迹有多大一部分是跟视图重合的.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;你大可安心获知我们并没有真的去除视图控制器的概念或抛弃 “controller” 术语来匹配 MVVM. (唷. )我们正要将重合的那块工作剥离到 view-model 中, 并让视图控制器的生活更加简单.&lt;/p&gt;
&lt;p&gt;我们实际上最终以 MVMCV 告终. Model View-Model Controller View. 我确信我无拘无束的应用设计模式骇客行为会让人大吃一惊.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xr4xo.com1.z0.glb.clouddn.com/2016-05-15-MCVMVMV.gif&quot; alt=&quot;MCVMVMV&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我们的结果:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xr4xo.com1.z0.glb.clouddn.com/2016-05-15-MVMCV.jpg&quot; alt=&quot;MVMCV&quot;&gt;&lt;/p&gt;
&lt;p&gt;现在视图控制器仅关注于用 view-model 的数据配置和管理各种各样的视图, 并在先关用户输入时让 view-model 获知并需要向上游修改数据. 视图控制器不需要了解关于网络服务调用, Core Data, 模型对象等. (事实上有时通过 view-model 头文件而不是复制一大堆属性来暴漏 model 是很务实的, 后面还会有)&lt;br&gt;view-model 会在视图控制器上以一个属性的方式存在. 视图控制器知道 view-model 和它的公有属性, 但是 view-model 对视图控制器一无所知. 你早就该对这个设计感觉好多了因为我们的关注点在这儿进行更好地分离.&lt;/p&gt;
&lt;p&gt;帮助你理解我们如何把组件组装在一起还有组件对应职责的另一种方式, 就是着眼于我们新的应用构建模块层级图.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xr4xo.com1.z0.glb.clouddn.com/2016-05-15-mvvm-layers.jpg&quot; alt=&quot;mvvm-layers&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;View-Model-和-View-Controller-在一起，但独立&quot;&gt;&lt;a href=&quot;#View-Model-和-View-Controller-在一起，但独立&quot; class=&quot;headerlink&quot; title=&quot;View-Model 和 View Controller, 在一起，但独立&quot;&gt;&lt;/a&gt;View-Model 和 View Controller, 在一起，但独立&lt;/h2&gt;&lt;p&gt;我们来看个简单的 view-model 头文件来对我们新构件的长相有个更好地概念. 为了情节简单, 我们构建按了一个伪造的推特客户端来查看任何推特用户的最新回复, 通过输入他们的姓名并点击 “Go”. 我们的样例界面将会是这样:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有一个让用户输入他们姓名的 UITextField , 和一个写着 “Go” 的 UIButton&lt;/li&gt;
&lt;li&gt;有显示被查看的当前用户头像和姓名的 UIImageView 和 UILabel 各一个&lt;/li&gt;
&lt;li&gt;下面放着一个显示最新回复推文的 UITableView&lt;/li&gt;
&lt;li&gt;允许无限滚动&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://7xr4xo.com1.z0.glb.clouddn.com/2016-05-15-tweeboatplus.jpg&quot; alt=&quot;tweeboatplus&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;View-Model-实例&quot;&gt;&lt;a href=&quot;#View-Model-实例&quot; class=&quot;headerlink&quot; title=&quot;View-Model 实例&quot;&gt;&lt;/a&gt;View-Model 实例&lt;/h3&gt;&lt;p&gt;我们的 view-model 头文件应该长这样:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MYTwitterLookupViewModel&lt;/span&gt;: &lt;span class=&quot;title&quot;&gt;NSObject&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;assign&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;readonly&lt;/span&gt;, getter=isUsernameValid) &lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt; usernameValid;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;strong&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;readonly&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *userFullName;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;strong&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;readonly&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;UIImage&lt;/span&gt; *userAvatarImage;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;strong&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;readonly&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;NSArray&lt;/span&gt; *tweets;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;assign&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;readonly&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt; allTweetsLoaded;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;strong&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;readwrite&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *username;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;) getTweetsForCurrentUsername;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;) loadMoreTweets;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;相当直截了当的填充. 注意到这些壮丽的 &lt;strong&gt;&lt;em&gt;readonly&lt;/em&gt;&lt;/strong&gt; 属性了么?这个 view-model 暴漏了视图控制器所必需的最小量信息, 视图控制器实际上并不在乎 view-model 是如何获得这些信息的. 现在我们两者都不在乎. 仅仅假定你习惯于标准的网络服务请求, 校验, 数据操作和存储.&lt;/p&gt;
&lt;h4 id=&quot;view-model-不做的事儿&quot;&gt;&lt;a href=&quot;#view-model-不做的事儿&quot; class=&quot;headerlink&quot; title=&quot;view-model 不做的事儿&quot;&gt;&lt;/a&gt;view-model 不做的事儿&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;对视图控制器以任何形式直接起作用或直接通告其变化&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;View-Controller-视图控制器&quot;&gt;&lt;a href=&quot;#View-Controller-视图控制器&quot; class=&quot;headerlink&quot; title=&quot;View Controller(视图控制器)&quot;&gt;&lt;/a&gt;View Controller(视图控制器)&lt;/h3&gt;&lt;p&gt;视图控制器从 view-model 获取的数据将用来:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当 usernameValid 的值发生变化时触发 “Go” 按钮的 enabled 属性&lt;/li&gt;
&lt;li&gt;当 usernameValid 等于 NO 时调整按钮的 alpha 值为0. 5(等于 YES 时设为1. 0)&lt;/li&gt;
&lt;li&gt;更新 UILable 的 text 属性为字符串 userFullName 的值&lt;/li&gt;
&lt;li&gt;更新 UIImageView 的 image 属性为 userAvatarImage 的值&lt;/li&gt;
&lt;li&gt;用 tweets 数组中的对象设置表格视图中的 cell (后面会提到)&lt;/li&gt;
&lt;li&gt;当滑到表格视图底部时如果 allTweetsLoaded 为 NO, 提供一个 显示 “loading” 的 cell&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;视图控制器将对 view-model 起如下作用:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每当 UITextField 中的文本发生变化, 更新 view-model 上仅有的 readwrite 属性 username&lt;/li&gt;
&lt;li&gt;当 “Go” 按钮被按下时调用 view-model 上的 getTweetsForCurrentUsername 方法&lt;/li&gt;
&lt;li&gt;当到达表格中的 “loading” cell 时调用 view-model 上的 loadMoreTweets 方法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;视图控制器不做的事儿:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;发起网络服务调用&lt;/li&gt;
&lt;li&gt;管理 tweets 数组&lt;/li&gt;
&lt;li&gt;判定 username 内容是否有效&lt;/li&gt;
&lt;li&gt;将用户的姓和名格式化为全名&lt;/li&gt;
&lt;li&gt;下载用户头像并转成 UIImage(如果你习惯在 UIImageView 上使用类别从网络加载图片, 你可以暴漏 URL 而不是图片. 这样就给 view-model 与 UIKit 之间一个更清晰的划分, 但我视 UIImage 为数据而非数据的确切显示. 这些东西不是固定死的. )&lt;pre&gt;&lt;code&gt;流汗
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;请再次注意视图控制器总的责任是处理 view-model 中的变化.&lt;/p&gt;
&lt;h3 id=&quot;子-View-Model&quot;&gt;&lt;a href=&quot;#子-View-Model&quot; class=&quot;headerlink&quot; title=&quot;子 View-Model&quot;&gt;&lt;/a&gt;子 View-Model&lt;/h3&gt;&lt;p&gt;我提到过使用 view-model 上的 tweets 数组中的对象配置表格视图的 cell.通常你会期待展现 tweets 的是数据-模型对象. 你可能已经对其感到奇怪, 因为我们试图通过 MVVM 模式不暴漏数据-模型对象. (前面提到过的)&lt;/p&gt;
&lt;p&gt;view-model 不必在屏幕上显示所有东西. 你可用子 view-model 来代表屏幕上更小, 更潜在被封装的部分. 如果一个视图上的一小块儿(比如表格的 cell)在 app 中可以被重用以及(或)表现多个数据-模型对象, 子 view-model 会格外有利.&lt;/p&gt;
&lt;p&gt;你不总是需要子 view-model. 比如, 我可能用表格 header 视图来渲染我们“tweetboat plus”应用的顶部. 它不是个可重用的组件, 所以我可能仅是将我们已经给视图控制器用过的相同的 view-model 传给那个自定义的 header 视图. 它会用到 view-model 中它需要的信息, 而无视余下的部分. 这对于保持子视图同步是极好的方式, 因为它们可以有效地与信息中相同确切的上下文作用, 并观察确切相同属性的更新.&lt;br&gt;在我们的例子中, tweets 数组将会被下面这样的子 view-model 充满:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//MyTweetCellViewModel.h&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MYTweetCellViewModel&lt;/span&gt;: &lt;span class=&quot;title&quot;&gt;NSObject&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;strong&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;readonly&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *tweetAuthorFullName;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;strong&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;readonly&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;UIImage&lt;/span&gt; *tweetAuthorAvatarImage;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;strong&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;readonly&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *tweetContent;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;你可能认为这也太像普通”推特”里的数据-模型对象了吧. 为啥要干将其转化成 view-model 的工作?即使类似, view-model 让我们限制信息只暴露给我们需要的地方, 提供额外数据转换的属性, 或为特定的视图计算数据. (此外, 当可以不暴露可变数据-模型对象时也是极好的, 因为我们希望 view-model 自己承担起更新它们的任务, 而不是靠视图或视图控制器. )&lt;/p&gt;
&lt;h4 id=&quot;View-Model-从哪来&quot;&gt;&lt;a href=&quot;#View-Model-从哪来&quot; class=&quot;headerlink&quot; title=&quot;View-Model 从哪来?&quot;&gt;&lt;/a&gt;View-Model 从哪来?&lt;/h4&gt;&lt;p&gt;那么 view-model 是何时何处被创建的呢?视图控制器创建它们自己的 view-model 么?&lt;/p&gt;
&lt;h4 id=&quot;View-Model-产生-View-Model&quot;&gt;&lt;a href=&quot;#View-Model-产生-View-Model&quot; class=&quot;headerlink&quot; title=&quot;View-Model 产生 View-Model&quot;&gt;&lt;/a&gt;View-Model 产生 View-Model&lt;/h4&gt;&lt;p&gt;严格来说, 你应该为 app delegate 中的顶级视图控制器创建一个 view-model. 当展示一个新的视图控制器时, 或很小的视图被 view-model 表现时, 你应要求当前的 view-model 为你创建一个子 view-model.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xr4xo.com1.z0.glb.clouddn.com/2016-05-15-child-view-models.jpg&quot; alt=&quot;child-view-models&quot;&gt;&lt;/p&gt;
&lt;p&gt;加入我们想要在用户轻拍应用顶部的头像时添加一个资料视图控制器. 我们可以为一级 view-model 添加类似如下方法:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (MYTwitterUserProfileViewModel *) viewModelForCurrentUser;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后在我们的一级视图控制器中这么用它:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//MYMainViewController.m &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;IBAction&lt;/span&gt;) didTapPrimaryUserAvatar&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    MYTwitterUserProfileViewModel *userProfileViewModel = [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.viewModel viewModelForCurrentUser];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    MYTwitterUserProfileViewController *profileViewController = &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [[MYTwitterUserProfileViewController alloc] initWithViewModel: userProfileViewModel];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.navigationController pushViewController: profileViewController animated:&lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在这个例子中我将会展现当前用户的资料视图控制器, 但是我的资料视图控制器需要一个 view-model. 我这的主视图控制器不知道(也不该知道)用于创建关联相关用户 view-model 的全部必要数据, 所以它请求它自己的 view-model 来干这种创建新 view-model 的苦差事.&lt;/p&gt;
&lt;h4 id=&quot;View-Model-列表&quot;&gt;&lt;a href=&quot;#View-Model-列表&quot; class=&quot;headerlink&quot; title=&quot;View-Model 列表&quot;&gt;&lt;/a&gt;View-Model 列表&lt;/h4&gt;&lt;p&gt;至于我们的推特 cell, 当数据驱动屏幕(在这个例子中或许是通过网络服务调用)聚到一起时, 我将会代表性地提前为对应的 cell 创建所有的 view-model. 所以在我们这个方案中, tweets 将会是一个 MYTweetCellViewModel 对象数组. 在我的表格视图中的 cellForRowAtIndexPath 方法中, 我将会在正确的索引上简单地抓取 view-model, 并把它赋值给我的 cell 上的 view-model 属性.&lt;/p&gt;
&lt;h3 id=&quot;Functional-Core-Imperative-Shell&quot;&gt;&lt;a href=&quot;#Functional-Core-Imperative-Shell&quot; class=&quot;headerlink&quot; title=&quot;Functional Core, Imperative Shell&quot;&gt;&lt;/a&gt;Functional Core, Imperative Shell&lt;/h3&gt;&lt;p&gt;view-model 这种通往应用设计的方法是一块应用设计之路上的垫脚石, 这种被称作“&lt;a href=&quot;https://www.destroyallsoftware.com/screencasts/catalog/functional-core-imperative-shell&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Functional Core, Imperative Shell&lt;/a&gt;”的应用设计由&lt;a href=&quot;https://twitter.com/garybernhardt&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Gary Bernhardt&lt;/a&gt;创造. (我最近十分有幸去听&lt;a href=&quot;https://andymatuschak.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Andy Matuschak&lt;/a&gt;关于这方面的演讲, 他为”胖的数值层, 瘦的对象层”提出充分理由. 虽然观点相似, 但关注于我们怎样移除对象和它们状态的边界影响性质, 并用 Swift 中的新数据结构构建更加函数式, 可测试的数值层. )&lt;/p&gt;
&lt;h4 id=&quot;Functional-Core&quot;&gt;&lt;a href=&quot;#Functional-Core&quot; class=&quot;headerlink&quot; title=&quot;Functional Core&quot;&gt;&lt;/a&gt;Functional Core&lt;/h4&gt;&lt;p&gt;view-model 就是 “&lt;a href=&quot;https://www.smashingmagazine.com/2014/07/02/dont-be-scared-of-functional-programming/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;functional core&lt;/a&gt;”, 尽管实际上在 iOS/Objective-C 中达到纯函数水平是很棘手的(Swift 提供了一些附加的函数性, 这会让我们更接近). 大意是让我们的 view-model 尽可能少的对剩余的”应用世界”的依赖和影响. 那意味着什么?想起你第一次学编程时可能学到的简单函数吧. 它们可能接受一两个参数并输出一个结果. 数据输入, 数据输出.这个函数可能是做一些数学运算或是将姓和名结合到一起. 无论应用的其他地方发生啥, 这个函数总是对相同的输入产生相同的输出. 这就是函数式方面.&lt;/p&gt;
&lt;p&gt;这就是我们为 view-model 谋求的东西. 他们富有逻辑和转换数据并将结果存到属性的功能. 理想上相同的输入(比如网络服务响应)将会导出相同的输出(属性的值). 这意味着尽可能多地消除由”应用世界”剩余部分带来的可能影响输出的因素, 比如使用一堆状态. &lt;strong&gt;&lt;em&gt;一个好的第一步就是不要再 view-model 头文件中引入 UIKit.h&lt;/em&gt;&lt;/strong&gt;.(这是个重大原则, 但也有些灰色区域. 比如, 你可能认为 UIImage 是数据而不是展示信息. PS: 我爱这么干. 既然这样的话就得引入 UIKit. h 以便使用 UIImage 类)UIKit 其性质就是将要影响许多应用世界. 它包含很多”副作用”, 凭借改变一个值或调用一个函数将触发很多间接(甚至未知)的改变.&lt;/p&gt;
&lt;p&gt;更新: 刚刚看了 Andy 在&lt;a href=&quot;http://2014.funswiftconf.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;函数式 Swift 会议&lt;/a&gt;上给出的另一个超赞的演讲, 于是又想到了一些. 要清楚你的 view-model 仍然只是一个对象, 而不用维护一些状态(否则它将不会是你视图中非常好用的模型了. )但你仍该努力将尽可能多的逻辑移到无状态的函数”值”中. 再重复一次, Swift在这方面比 Objective-C 更加可行.&lt;/p&gt;
&lt;h4 id=&quot;Imperative-Declarative-Shell&quot;&gt;&lt;a href=&quot;#Imperative-Declarative-Shell&quot; class=&quot;headerlink&quot; title=&quot;Imperative (Declarative?) Shell&quot;&gt;&lt;/a&gt;Imperative (Declarative?) Shell&lt;/h4&gt;&lt;p&gt;命令式外壳 (Imperative Shell) 是我们需要做所有的状态转换, 应用世界改变的苦差事的地方, 为的是将 view-model 数据转成给用户在屏幕上看到的东西. 这是我们的视图(控制器), 实际上我们在这分离 UIKit 的工作. 我仍将特别注意尽可能消除状态并用 ReactiveCocoa 这种陈述性质的东西做这方面工作, 而 iOS 和 UIKit 在设计上是命令式的. (表格的 data source 就是个很好的例子, 因为它的委托模式强制将状态应用到委托中, 为了当请求发生时能够为表格视图提供信息. 实际上委托模式通常强制一大堆状态的使用)&lt;/p&gt;
&lt;h4 id=&quot;可测试的核心&quot;&gt;&lt;a href=&quot;#可测试的核心&quot; class=&quot;headerlink&quot; title=&quot;可测试的核心&quot;&gt;&lt;/a&gt;可测试的核心&lt;/h4&gt;&lt;p&gt;iOS 的单元测试是个脏, 苦, 乱的活儿. 至少我去做的时候得出的是这么个结论. 就这方面我还出读过一两本书, 但当开始做视图控制器的 mocking 和 swizzling 使其一些逻辑可测试时, 我目光呆滞. 我最终把单元测试归入模型和任何同类别模型管理类中. (译者注: mock 是测试常用的手段, 而 method swizzling 是基于 Objective-C Runtime 交换方法实现的黑魔法)&lt;/p&gt;
&lt;p&gt;这个函数式核心一样的 view-model 的最大优点, 除了 bug 数量随着状态数递减之外, 就是变得非常能够进行单元测试. 如果你有那种每次输入相同而产生的输出也相同的方法, 那就非常适合单元测试的世界. 我们现在将我们的数据用获取/逻辑/转换提取出, 避免了视图控制器的复杂性. 那意味着构建棒棒哒测试时不需要用疯狂的 mock 对象, method swizzling, 或其他疯癫的变通方法(希望能有).&lt;/p&gt;
&lt;h3 id=&quot;连接一切&quot;&gt;&lt;a href=&quot;#连接一切&quot; class=&quot;headerlink&quot; title=&quot;连接一切&quot;&gt;&lt;/a&gt;连接一切&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;那么当 view-model 的共有属性发生变化时我们如何更新我们的视图呢? &lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;绝大部分时间我们用对应的 view-model 来初始化视图控制器, 有点类似我们刚刚在上文见到的:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;MYTwitterUserProfileViewController *profileViewController =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [[MYTwitterUserProfileViewController alloc] initWithViewModel:  userProfileViewModel];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;有时你无法在初始化时将 view-model 传入, 比如在 storyboard segue 或 cell dequeuing 的情况下. 这时你应该在讨论中的视图(控制器)中暴露一个公有可写的 view-model 属性.&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;MYTwitterUserCell *cell =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.tableView dequeueReusableCellWithIdentifier: &lt;span class=&quot;string&quot;&gt;@&quot;MYTwitterUserCell&quot;&lt;/span&gt; forIndexPath: indexPath];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// grab the cell view-model from the vc view-model and assign it&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cell.viewModel = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.viewModel. tweets[indexPath. row];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;有时我们可以在钩子程序调用前传入 view-model, 比如 &lt;strong&gt;init&lt;/strong&gt; 和 &lt;strong&gt;&lt;em&gt;viewDidLoad&lt;/em&gt;&lt;/strong&gt;, 我们可以从view-model 的属性初始化所有 UI 元素的状态.&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//dontDoThis1.m &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;) initWithViewModel:(MYTwitterLookupViewModel *) viewModel &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; = [&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _viewModel = viewModel;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;) viewDidLoad &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; viewDidLoad];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _goButton.enabled = viewModel.isUsernameValid;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _goButton.alpha = viewModel.isUsernameValid ? &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; : &lt;span class=&quot;number&quot;&gt;0.5&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// etc&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;好棒!我们已经配置好了初始值. 当 view-model 上的数据改变时怎么办? 当”go” 按钮在什么时候可用了怎么办?当用户标签和头像在什么时候从网络上下载并填充了怎么办?&lt;/p&gt;
&lt;p&gt;我们可以将视图控制器暴露给 view-model, 以便于当相关数据变化或类似事件发送时它可以调用一个 “updateUI” 方法. (别这么干. )在 view-model 上将视图控制器作为一个委托?当 view-model 内容有变化时发个通知?(不不不不. )&lt;/p&gt;
&lt;p&gt;我们的视图控制器会感知一些变化的发生. 我们可以使用从 &lt;strong&gt;UITextfield&lt;/strong&gt; 得来的委托方法在每当有字符变化时通过检查 view-model 来更新按钮的状态.&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//dontDoThisEither.m&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)textFieldDidChange:(&lt;span class=&quot;built_in&quot;&gt;UITextField&lt;/span&gt; *)sender &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// update the view-model&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.viewModel.username = sender.text;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// check if things are now valid&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.goButton.enabled = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.viewModel.isUsernameValid;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.goButton.alpha = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.viewModel.isUsernameValid ? &lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt; : &lt;span class=&quot;number&quot;&gt;0.5&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这种方法解决的场景是在只有再文本框发生变化时才会影响 view-model 中的 &lt;strong&gt;isUsernameValid&lt;/strong&gt; 值. 假使还有其他变量/动作改变 &lt;strong&gt;isUsernameValid&lt;/strong&gt; 的状态将会怎么样?对于 view-model 中的网络调用会怎么样?或许我们该为 view-model 上的方法加一个完成后回调处理, 这样我们此时就可以更新 UI 的一切东西了?使用珍贵而笨重的 KVO 方法怎么样?&lt;/p&gt;
&lt;p&gt;我们或许最终使用多种多样我们熟悉的机制将 view-model 和视图控制器所有的接触点都连起来, 但你已经知道了标题上不是这么写的. 这样在代码中创建了大量的入口点, 仅仅为了简单的更新 UI 就要在代码中完全重新创建应用状态上下文.&lt;/p&gt;
&lt;p&gt;我们或许最终使用多种多样我们熟悉的机制将 view-model 和视图控制器所有的接触点都连起来, 但你已经知道了标题上不是这么写的. 这样在代码中创建了大量的入口点, 仅仅为了简单的更新 UI 就要在代码中完全重新创建应用状态上下文.&lt;/p&gt;
&lt;h2 id=&quot;进入-ReactiveCocoa&quot;&gt;&lt;a href=&quot;#进入-ReactiveCocoa&quot; class=&quot;headerlink&quot; title=&quot;进入 ReactiveCocoa&quot;&gt;&lt;/a&gt;进入 ReactiveCocoa&lt;/h2&gt;&lt;p&gt;ReactiveCocoa(RAC) 是来拯救我们的, 并恰好返回给我们一点理智. 让我们看看如何做到.&lt;br&gt;思考在一个新的用户页面上控制信息的流动, 当表单合法时更新提交按钮的状态. 你现在可能会照下面这么做:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xr4xo.com1.z0.glb.clouddn.com/2016-05-15-new-user-form-imperative.jpg&quot; alt=&quot;new-user-form-imperative&quot;&gt;&lt;/p&gt;
&lt;p&gt;你最后通过使用状态, 小心翼翼地代码中许多不同且零碎无关的内容穿到简单的逻辑上. 看看你信息流中所有不同的入口点?(这还只是一个 UI 元素中的一条逻辑线. )我们程序中现在用的抽象概念还不够厉害, 不能为我们追踪所有事物的关系, 所以我们停止自己去干这蛋疼事儿.&lt;/p&gt;
&lt;p&gt;让我们看看陈述版本:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xr4xo.com1.z0.glb.clouddn.com/2016-05-15-new-user-form-declarative.jpg&quot; alt=&quot;new-user-form-declarative&quot;&gt;&lt;/p&gt;
&lt;p&gt;这看起来可能像是为我们应用流程文档中的一张老旧的计算机科学图解. 通过陈述式的编程, 我们使用了更高层次的抽象, 来让我们实际编程更靠近我们在脑海中设计流程的方式. 我们让电脑为我们做更多工作. 实际的代码更加像这幅图了.&lt;/p&gt;
&lt;h3 id=&quot;RACSignal&quot;&gt;&lt;a href=&quot;#RACSignal&quot; class=&quot;headerlink&quot; title=&quot;RACSignal&quot;&gt;&lt;/a&gt;RACSignal&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;RACSignal&lt;/strong&gt; (信号)就 RAC 来说是构造单元. 它代表我们最终将要收到的信息. 当你能将未来某时刻收到的消息具体表示出来时, &lt;strong&gt;你可以开始预先(陈述性)运用逻辑并构建你的信息流&lt;/strong&gt;,而不是必须等到事件发生(命令式).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;信号会为了控制通过应用的信息流而获得所有这些异步方法&lt;/em&gt;&lt;/strong&gt;(委托, 回调 block, 通知, KVO, target/action 事件观察, 等)并将它们统一到一个接口下.这只是直观理解. 不仅是这些, 因为信息会流过你的应用, 它还提供给你轻松转换/分解/合并/过滤信息的能力.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xr4xo.com1.z0.glb.clouddn.com/2016-05-15-replace-async-tools.jpg&quot; alt=&quot;replace-async-tools&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;那么什么是信号呢-这是一个信号&quot;&gt;&lt;a href=&quot;#那么什么是信号呢-这是一个信号&quot; class=&quot;headerlink&quot; title=&quot;那么什么是信号呢?这是一个信号:&quot;&gt;&lt;/a&gt;那么什么是信号呢?这是一个信号:&lt;/h4&gt;&lt;p&gt;信号是一个发送一连串值的物体. 但是我们这儿的信号啥也不干, 因为它还没有订阅者. 如果有订阅者监听时(已订阅)信号才会发信息. 它将会向那个订阅者发送0或多个载有数值的”next”事件, 后面跟着一个”complete”事件或一个”error”事件. (信号类似于其他语言/工具包中的 “promise”, 但更强大, 因为它不仅限于向它的订阅者一次只传递一个返回值. )&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xr4xo.com1.z0.glb.clouddn.com/2016-05-15-signal-with-subscriber.jpg&quot; alt=&quot;signal-with-subscribe&quot;&gt;&lt;/p&gt;
&lt;p&gt;正如我之前提到的, 如果觉得需要的话你可以过滤, 转换, 分解和合并那些值. 不同的订阅者可能需要使用信号通过不同方式发送的值.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xr4xo.com1.z0.glb.clouddn.com/2016-05-15-signal-map.jpg&quot; alt=&quot;signal-map&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;信号发送的值是从哪获得的&quot;&gt;&lt;a href=&quot;#信号发送的值是从哪获得的&quot; class=&quot;headerlink&quot; title=&quot;信号发送的值是从哪获得的?&quot;&gt;&lt;/a&gt;信号发送的值是从哪获得的?&lt;/h4&gt;&lt;p&gt;信号是一些等待某事发生的异步代码, 然后把结果值发送给它们的订阅者. 你可以用 RACSignal 的类方法 createSignal: 手动创建信号:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//networkSignal.m&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;RACSignal *networkSignal = [RACSignal createSignal:^RACDisposable *(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;&amp;lt;RACSubscriber&amp;gt; subscriber) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        NetworkOperation *operation = [NetworkOperation getJSONOperationForURL:&lt;span class=&quot;string&quot;&gt;@&quot;http://someurl&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [operation setCompletionBlockWithSuccess:^(NetworkOperation *theOperation, &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; *result) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            [subscriber sendNext:result];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            [subscriber sendCompleted];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; failure:^(NetworkOperation *theOperation, &lt;span class=&quot;built_in&quot;&gt;NSError&lt;/span&gt; *error) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            [subscriber sendError:error];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我在这用一个具有成功和失败 block (伪造)的网络操作创建了一个信号. (如果我想让信号在被订阅时才让网络请求发生, 还可以用 &lt;strong&gt;RACSignal&lt;/strong&gt; 的类方法 &lt;em&gt;defer&lt;/em&gt;. )我在成功的 block 里使用提供的 &lt;em&gt;subscriber&lt;/em&gt; 对象调用 &lt;em&gt;sendNext&lt;/em&gt;: 和 &lt;em&gt;sendCompleted&lt;/em&gt;: 方法, 或在失败的 block 中调用 &lt;em&gt;sendError&lt;/em&gt;:. 现在我可以订阅这个信号并将在响应返回时接收到 json 值或是 error.&lt;/p&gt;
&lt;p&gt;幸运的是, &lt;strong&gt;RAC&lt;/strong&gt; 的创造者实际上使用它们自己的库来创建真的事物(捉摸一下), 所以对于我们在日常需要什么, 他们有很强烈的想法. 他们为我们提供了很多机制, 来从我们通常使用的现存的异步模式中拉取信号. 别忘了如果你有一个没有被某个内建信号覆盖到的异步任务, 你可以很容易地用 &lt;em&gt;createSignal&lt;/em&gt;: 或类似方法来创建信号.&lt;/p&gt;
&lt;p&gt;一个被提供的机制就是 &lt;strong&gt;RACObserve()&lt;/strong&gt; 宏. (如果你不喜欢宏, 你可以简单地看看罩子下面并用稍微多些冗杂的描述. 这也非常好. 在我们得到 Swift 版本的替代之前, 这也有在 Swift 中使用 RAC 的解决方案. )这个宏是 RAC 中对 KVO 中那些悲惨的 API 的替代. 你只需要传入对象和你想观察的那个对象某属性的 keypath. 给出这些参数后, &lt;strong&gt;RACObserve&lt;/strong&gt; 会创建一个信号, 一旦它有了订阅者, 它就立刻发送那个属性的当前值, 并在发送那个属性在这之后的任何变化.&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;RACSignal *usernameValidSignal = RACObserve(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.viewModel,  usernameIsValid);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;http://7xr4xo.com1.z0.glb.clouddn.com/2016-05-15-signal-racobserve.jpg&quot; alt=&quot;signal-racobserve&quot;&gt;&lt;/p&gt;
&lt;p&gt;这仅是提供用于创建信号的一个工具. 这里有几个立即可用的方式, 来从内置控制流机制中拉取信号:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//signals.m&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;RACSignal *controlUpdate = [myButton rac_signalForControlEvents:&lt;span class=&quot;built_in&quot;&gt;UIControlEventTouchUpInside&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// signals for UIControl events send the control event value (UITextField, UIButton, UISlider, etc)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// subscribeNext:^(UIButton *button) &amp;#123; NSLog(@&quot;%@&quot;, button); // UIButton instance &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;RACSignal *textChange = [myTextField rac_textSignal];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// some special methods are provided for commonly needed control event values off certain controls&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// subscribeNext:^(UITextField *textfield) &amp;#123; NSLog(@&quot;%@&quot;, textfield.text); // &quot;Hello!&quot; &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;RACSignal *alertButtonClicked = [myAlertView rac_buttonClickedSignal];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// signals for some delegate methods send the delegate params as the value&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// e.g. UIAlertView, UIActionSheet, UIImagePickerControl, etc&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// (limited to methods that return void)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// subscribeNext:^(NSNumber *buttonIndex) &amp;#123; NSLog(@&quot;%@&quot;, buttonIndex); // &quot;1&quot; &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;RACSignal *viewAppeared = [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; rac_signalForSelector:&lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(viewDidAppear:)];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// signals for arbitrary selectors that return void, send the method params as the value&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// works for built in or your own methods&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// subscribeNext:^(NSNumber *animated) &amp;#123; NSLog(@&quot;viewDidAppear %@&quot;, animated); // &quot;viewDidAppear 1&quot; &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;记住你也能轻松创建自己的信号, 包括替代那些没有内建支持的其他委托. 我们现在能够从所有这些不连贯的异步/控制流工具中拉取出信号并将他们合并, 试想想这该多酷!这些会成为我们之前看到的陈述性图表中的节点. 真是兴奋.&lt;/p&gt;
&lt;h4 id=&quot;什么是订阅者&quot;&gt;&lt;a href=&quot;#什么是订阅者&quot; class=&quot;headerlink&quot; title=&quot;什么是订阅者?&quot;&gt;&lt;/a&gt;什么是订阅者?&lt;/h4&gt;&lt;p&gt;简言之, 订阅者就是一段代码, 它等待信号给它发送一些值, 然后订阅者就能处理这些值了. (它也可以作用于 “complete” 和 “error” 事件. )&lt;/p&gt;
&lt;p&gt;这有一个简单的订阅者, 是通过向信号的实例方法 &lt;em&gt;subscribeNext&lt;/em&gt; 传入一个 block 来创建的. 我们在这通过 &lt;em&gt;RACObserve()&lt;/em&gt; 宏创建信号来观察一个对象上属性的当前值, 并把它赋值给一个内部属性.&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;) viewDidLoad &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// . . . &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// create and get a reference to the signal&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  RACSignal *usernameValidSignal = RACObserve(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.viewModel,  isUsernameValid);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// update the local property when this value changes&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [usernameValidSignal subscribeNext: ^(&lt;span class=&quot;built_in&quot;&gt;NSNumber&lt;/span&gt; *isValidNumber) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.usernameIsValid = isValidNumber. boolValue&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意 RAC 只处理对象, 而不处理像 BOOL 这样的原始值. 不过不用担心, RAC 通常会帮你这些转换.&lt;/p&gt;
&lt;p&gt;幸运的是 &lt;strong&gt;RAC&lt;/strong&gt; 的创造者也意识到这种绑定行为的普遍必要性, 所以他们提供了另一个宏 &lt;em&gt;RAC()&lt;/em&gt;. 与 &lt;em&gt;RACObserve()&lt;/em&gt; 相同, 你提供想要与即将到来的值绑定的对象和参数, 在其内部它所做的是创建一个订阅者并更新其属性的值. 我们的例子现在看起来像这样:&lt;br&gt;&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;) viewDidLoad &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//. . . &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    RAC(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;,  usernameIsValid) = RACObserve(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.viewModel,  isUsernameValid);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;考虑下我们的目标, 这么干有点傻啊. 我们不需要将信号发送的值存到属性中(这会创建状态), 我们真正要做的是用从那个值获取到信息来更新 UI.&lt;/p&gt;
&lt;h4 id=&quot;转换数据流&quot;&gt;&lt;a href=&quot;#转换数据流&quot; class=&quot;headerlink&quot; title=&quot;转换数据流&quot;&gt;&lt;/a&gt;转换数据流&lt;/h4&gt;&lt;p&gt;现在我们进入 RAC 为我们提供的用于转换数值流的方法. 我们将会利用 RACSignal 的实例方法 map.&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//transformingStreams.m&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;) viewDidLoad &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    RACSignal *usernameIsValidSignal = RACObserve(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.viewModel, isUsernameValid);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    RAC(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.goButton, enabled) = usernameIsValidSignal;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    RAC(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.goButton, alpha) = [usernameIsValidSignal&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        map:^&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;NSNumber&lt;/span&gt; *usernameIsValid) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; usernameIsValid.boolValue ? @&lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt; : @&lt;span class=&quot;number&quot;&gt;0.5&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样现在我们将 view-model 上的 &lt;em&gt;isUsernameValid&lt;/em&gt; 发生的变化直接绑定到 &lt;em&gt;goButton&lt;/em&gt; 的 &lt;em&gt;enabled&lt;/em&gt; 属性上. 酷吧?对 &lt;em&gt;alpha&lt;/em&gt; 的绑定更酷, 因为我们正在使用 &lt;strong&gt;map&lt;/strong&gt; 方法将值转换成与 &lt;em&gt;alpha&lt;/em&gt; 属性相关的值. (注意在这里我们返回的是一个 NSNumber 对象而不是原始float值. 这基本上是唯一的污点: 你需要负责为 RAC 将原始值转化为对象, 因为它不能帮你导出来.&lt;/p&gt;
&lt;h4 id=&quot;多个订阅者-副作用-昂贵的操作&quot;&gt;&lt;a href=&quot;#多个订阅者-副作用-昂贵的操作&quot; class=&quot;headerlink&quot; title=&quot;多个订阅者, 副作用, 昂贵的操作&quot;&gt;&lt;/a&gt;多个订阅者, 副作用, 昂贵的操作&lt;/h4&gt;&lt;p&gt;订阅信号链时要明白重要的一件事是每当一个新值通过信号链被发送出去时, 实际上会给每个订阅者都发送一次. 直到意识到这就我们而言是有意义的, 信号发出的值不存储在任何地方(除了 RAC 在内部实现中). 当信号需要发送一个新的值时, 它会遍历所有的订阅者并给每个订阅者发送那个值. (这是对信号链实际工作的简化说明, 但基本想法是对的)&lt;/p&gt;
&lt;p&gt;这为什么重要?这意味着信号链某处存在的任何副作用, 任何影响应用世界的转变, 将会发生多次. 这对新接触 &lt;strong&gt;RAC&lt;/strong&gt; 的用户来说是意想不到的. (这也违反了函数式构建的理念-数据输入, 数据输出).&lt;/p&gt;
&lt;p&gt;一个做作的例子可能是: 信号链某处的信号在每次按钮被按下时更新 self 中的一个计数器属性. 如果信号链有多个订阅者, 计数器的增长将会比你想的还要多. 你需要努力从信号链中尽可能剔除副作用. 当副作用不可避免时, 你可以使用一些恰当的预防机制. 我将会在另一篇文章中探索.&lt;/p&gt;
&lt;p&gt;除副作用之外, 你需要注意带有昂贵操作和可变数据的信号链. 网络请求就是一个三者兼得的例子:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;网络请求影响了应用的网络层(副作用).&lt;/li&gt;
&lt;li&gt;网络请求为信号链引入了可变数据. (两个完全一样请求可能返回了不同的数据. )&lt;/li&gt;
&lt;li&gt;网络请求反应慢啊.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;例如, 你可能有个信号在每次按钮按下时发送一个值, 而你想将这个值转换成网络请求的结果. 如果有多个订阅者要这个处理信号链上返回的这个值, 你将发起多个网络请求.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xr4xo.com1.z0.glb.clouddn.com/2016-05-15-signal-side-effect.jpg&quot; alt=&quot;signal-side-effect&quot;&gt;&lt;/p&gt;
&lt;p&gt;网络请求明显是经常需要的. 正如你所期望, RAC 提供这些情况的解决方案, 也就是 RACCommand 和多点广播. 我将会在下一篇文章中更深入地分析.&lt;/p&gt;
&lt;h3 id=&quot;Tweetboat-Plus&quot;&gt;&lt;a href=&quot;#Tweetboat-Plus&quot; class=&quot;headerlink&quot; title=&quot;Tweetboat Plus&quot;&gt;&lt;/a&gt;Tweetboat Plus&lt;/h3&gt;&lt;p&gt;既然简短的介绍(嗯哼)扯远了, 让我们着眼于如何用 ReactiveCocoa 将 view-model 与视图控制器连接起来.&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// View Controller&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;) viewDidLoad &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; viewDidLoad];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    RAC(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.viewModel,  username) = [myTextfield rac_textSignal];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    RACSignal *usernameIsValidSignal = RACObserve(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.viewModel,  usernameValid);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    RAC(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.goButton,  alpha) = [usernameIsValidSignal&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        map:  ^(&lt;span class=&quot;built_in&quot;&gt;NSNumber&lt;/span&gt; *valid) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; valid. boolValue ? @&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; :  @&lt;span class=&quot;number&quot;&gt;0.&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    RAC(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.goButton,  enabled) = usernameIsValidSignal;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    RAC(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.avatarImageView,  image) = RACObserve(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.viewModel,  userAvatarImage);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    RAC(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.userNameLabel,  text) = RACObserve(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.viewModel,  userFullName);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @weakify(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [[[RACSignal merge: @[RACObserve(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.viewModel,  tweets), &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        RACObserve(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.viewModel,  allTweetsLoaded)]]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        bufferWithTime: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; onScheduler: [RACScheduler mainThreadScheduler]]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        subscribeNext: ^(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; value) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            @strongify(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.tableView reloadData];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.goButton rac_signalForControlEvents: &lt;span class=&quot;built_in&quot;&gt;UIControlEventTouchUpInside&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        subscribeNext:  ^(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; value) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            @strongify(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.viewModel getTweetsForCurrentUsername];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-(&lt;span class=&quot;built_in&quot;&gt;UITableViewCell&lt;/span&gt;*)tableView: (&lt;span class=&quot;built_in&quot;&gt;UITableView&lt;/span&gt; *)tableView cellForRowAtIndexPath: (&lt;span class=&quot;built_in&quot;&gt;NSIndexPath&lt;/span&gt; *)indexPath &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// if table section is the tweets section&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (indexPath. section == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        MYTwitterUserCell *cell =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.tableView dequeueReusableCellWithIdentifier: &lt;span class=&quot;string&quot;&gt;@&quot;MYTwitterUserCell&quot;&lt;/span&gt; forIndexPath: indexPath];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// grab the cell view model from the vc view model and assign it&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        cell.viewModel = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.viewModel. tweets[indexPath. row];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; cell;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// else if the section is our loading cell&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        MYLoadingCell *cell =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.tableView dequeueReusableCellWithIdentifier: &lt;span class=&quot;string&quot;&gt;@&quot;MYLoadingCell&quot;&lt;/span&gt; forIndexPath: indexPath];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.viewModel loadMoreTweets];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; cell;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// MYTwitterUserCell&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// this could also be in cell init&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;) awakeFromNib &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; awakeFromNib];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    RAC(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.avatarImageView,  image) = RACObserve(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;,  viewModel. tweetAuthorAvatarImage);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    RAC(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.userNameLabel,  text) = RACObserve(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;,  viewModel. tweetAuthorFullName);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    RAC(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.tweetTextLabel,  text) = RACObserve(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;,  viewModel. tweetContent);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;让我们过一遍这个例子.&lt;/p&gt;
&lt;p&gt;RAC(self.viewModel,  username) = [myTextfield rac_textSignal];&lt;/p&gt;
&lt;p&gt;在这我们用 RAC 库中的方法从 &lt;strong&gt;UITextField&lt;/strong&gt; 拉取一个信号. 这行代码将 view-model 上的可读写属性 &lt;em&gt;username&lt;/em&gt; 绑定到文本框上的用户输入的任何更新.&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;RACSignal *usernameIsValidSignal = RACObserve(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.viewModel,  usernameValid);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;RAC(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.goButton,  alpha) = [usernameIsValidSignal&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    map:  ^(&lt;span class=&quot;built_in&quot;&gt;NSNumber&lt;/span&gt; *valid) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; valid. boolValue ? @&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; :  @&lt;span class=&quot;number&quot;&gt;0.&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;RAC(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.goButton,  enabled) = usernameIsValidSignal;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在这我们用 &lt;strong&gt;RACObserve&lt;/strong&gt; 方法在 view-model 的 &lt;em&gt;usernameValid&lt;/em&gt; 属性上创建了一个信号 &lt;em&gt;usernameIsValidSignal&lt;/em&gt;. 无论何时属性发生变化, 它将会沿着管道发送一个新的 @YES 或 @NO. 我们拿到那个值并将其绑定到 &lt;em&gt;goButton&lt;/em&gt; 的两个属性上. 首先我们将 alpha 分别对应 YES 或 NO 更新到1或0. 5(记着在这必须返回 NSNumber). 然后我们直接将信号绑定到 &lt;em&gt;enabled&lt;/em&gt; 属性, 因为 YES 和 NO 在这无需转换就能完美地运作.&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;RAC(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.avatarImageView,  image) = RACObserve(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.viewModel,  userAvatarImage);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;RAC(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.userNameLabel,  text) = RACObserve(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.viewModel,  userFullName);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;下面我们为表头的图像视图和用户标签创建绑定, 再次在 view-model 上对应的属性上用 &lt;strong&gt;RACObserve&lt;/strong&gt; 宏创建信号.&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@weakify(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[[[RACSignal merge: @[RACObserve(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.viewModel,  tweets), &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                     RACObserve(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.viewModel,  allTweetsLoaded)]]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    bufferWithTime: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; onScheduler: [RACScheduler mainThreadScheduler]]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    subscribeNext: ^(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; value) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        @strongify(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.tableView reloadData];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这货看上去有点诡异, 所以我们在这上多花点时间. 我们想在 view-model 上 &lt;em&gt;tweets&lt;/em&gt; 数组或 &lt;em&gt;allTweetsLoaded&lt;/em&gt; 属性发生变化时更新表格视图. (在这个例子中, 我们要用一个简单的方法来重新加载整张表. )所以我们将这两个属性被观察后创建的两个信号合并成一个更大的信号, 当两个属性中有一个发生变化, 这个信号就会发送值. (你一贯认为信号的值是同类型的, 不会像这个信号有一样混杂的值. 这很可能在 Swift 版本的 RAC 中强制要求, 但在这我们不关心发出的真实值, 我们只是用它来触发表格式图的重新加载. )&lt;/p&gt;
&lt;p&gt;那么这儿看起来最吓人的部分可能是信号链中的 &lt;strong&gt;bufferWithTime:&lt;/strong&gt; &lt;strong&gt;onScheduler:&lt;/strong&gt; 方法. 需要它来围绕 UIKit 中的一个问题进行变通. &lt;em&gt;tweets&lt;/em&gt; 和 &lt;em&gt;allTweetsLoaded&lt;/em&gt; 这两个属性我们都需要追踪, 万一 &lt;em&gt;tweets&lt;/em&gt; 变化和 &lt;em&gt;allTweetsLoaded&lt;/em&gt; 为否(不管怎样我们都得重新加载表格). 有时两个属性都将在同一准确的时间发生变化, 意味着合并后的大信号中的两个信号都会发送一个值, 那么 &lt;em&gt;reloadData&lt;/em&gt; 方法将会在同一个运行循环中被调用两次. UIKit 不喜欢这样. &lt;strong&gt;bufferWithTime&lt;/strong&gt;: 在给明的时间内抓取所有下一个到来的值, 当给定的时间过后将所有值合在一起发给订阅者. 通过传入0作为时间, &lt;strong&gt;bufferWithTime:&lt;/strong&gt; 将会抓取那个合并信号在特定的运行循环中发出的全部值, 并将他们一起发送出去. (NSTimer 以同样的方式工作, 这不是巧合, 因为 &lt;strong&gt;bufferWithTime:&lt;/strong&gt; 是用 NSTimer 构建的. )暂时不用担心 scheduler, 试把它想做指明这些值必须在主线程上被发送. 现在我们确保 reloadData 每次运行循环只被调用一次.&lt;br&gt;注意我在这用 &lt;em&gt;@weakify/@strongify&lt;/em&gt; 宏切换 strong 和 weak. 这在创建所有这些 block 时非常重要. 在 RAC 的 block 中使用 self 时self 将会被捕获为强引用并得到保留环, 除非你尤其意识到要破除保留环&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.goButton rac_signalForControlEvents: &lt;span class=&quot;built_in&quot;&gt;UIControlEventTouchUpInside&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    subscribeNext:  ^(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; value) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        @strongify(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.viewModel getTweetsForCurrentUsername];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我将会在下一篇文章中在这里引入 &lt;strong&gt;RACCommand&lt;/strong&gt;, 但目前我们只是当按钮被触碰时手动调用 view-model 的 &lt;em&gt;getTweetsForCurrentUsername&lt;/em&gt; 方法.&lt;br&gt;我们已经搞定了 &lt;em&gt;cellForRowAtIndexPath&lt;/em&gt; 的第一部分, 那么我在这将只说下 loading cell:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;MYLoadingCell *cell =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.tableView dequeueReusableCellWithIdentifier: &lt;span class=&quot;string&quot;&gt;@&quot;MYLoadingCell&quot;&lt;/span&gt; forIndexPath: indexPath];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.viewModel loadMoreTweets];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; cell;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这是另一块我们以后将利用到 &lt;strong&gt;RACCommand&lt;/strong&gt; 的地方, 但目前我们只是调用 view-model 的 &lt;em&gt;loadMoreTweets&lt;/em&gt; 方法. 我们将只是信任如果 cell 显示或隐藏多次的话 view-model 会避免多次内部调用.&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;) awakeFromNib &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; awakeFromNib];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    RAC(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.avatarImageView,  image) = RACObserve(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;,  viewModel. tweetAuthorAvatarImage);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    RAC(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.userNameLabel,  text) = RACObserve(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;,  viewModel. tweetAuthorFullName);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    RAC(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.tweetTextLabel,  text) = RACObserve(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;,  viewModel. tweetContent);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这段现在应该非常直接了, 除此之外我想指出一点. 我们正在将图片和文字绑定到 UI 上对应的属性, 但注意 &lt;em&gt;viewModel&lt;/em&gt; 出现在 &lt;strong&gt;RACObserve&lt;/strong&gt; 宏中逗号右边. 这些 &lt;em&gt;cell&lt;/em&gt; 终将被重用, 新的 &lt;em&gt;view-models&lt;/em&gt; 将会被赋值. 如果我们不将 &lt;em&gt;viewModel&lt;/em&gt; 放在逗号右边, 那就会监听 &lt;em&gt;viewModel&lt;/em&gt; 属性的变化然后每次都要重新设置绑定;如果放在逗号右边, &lt;strong&gt;RACObserve&lt;/strong&gt; 将会为我们负责这些事儿. 因此我们只需要设定一次绑定并让 Reactive Cocoa 做剩余的部分. 这是在绑定表格 cell 时为了性能需要记住的好东西. 我在实践中即使是有很多表格 cell 依然没有出过问题.&lt;/p&gt;
&lt;h4 id=&quot;福利-消除更多的状态&quot;&gt;&lt;a href=&quot;#福利-消除更多的状态&quot; class=&quot;headerlink&quot; title=&quot;福利-消除更多的状态&quot;&gt;&lt;/a&gt;福利-消除更多的状态&lt;/h4&gt;&lt;p&gt;有时候你可以在 view-model 中暴露 &lt;strong&gt;RACSignal&lt;/strong&gt; 对象来替代像字符串和图像这样的属性, 这能在 view-model 上消除更多的状态. 然后视图控制器就不需要自己用 &lt;strong&gt;RACObserve&lt;/strong&gt; 创建信号了, 并只是直接影响这些信号. 要意识到如果你的信号在被 UI 订阅/绑定到 UI 之前发出过一个值, 那么你将不会收到那个”初始”的值.&lt;/p&gt;
&lt;h2 id=&quot;结论&quot;&gt;&lt;a href=&quot;#结论&quot; class=&quot;headerlink&quot; title=&quot;结论&quot;&gt;&lt;/a&gt;结论&lt;/h2&gt;&lt;p&gt;本文篇幅略长, 但别被吓着. 这还有好多没讲的, 而且是干货儿, 是舒展你大脑的好方法. 这毫无疑问是不同的编程风格. 花一会儿功夫停止机械地试图用命令式方案去解决问题. 即使你一开始不是经常用这种编程风格, 我认为这有助于理解和提醒我们有截然不同的途径来解决我们程序员的困惑.&lt;/p&gt;
&lt;p&gt;下一次我将稍微深入 view-model 内部中本文没提到的内容, 并介绍下 RACCommand(希望篇幅能短很多). 然后我们将投入到一个真实案例中, 那是我的一个叫做Three Cents的 app 中的一个相当复杂的页面, 它混合了网络调用, CoreData, 多重 UI 状态, 等等!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xr4xo.com1.z0.glb.clouddn.com/2016-05-15-ThreeCentsExplore.gif&quot; alt=&quot;ThreeCentsExplore&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;此篇文章主要介绍了MVC和MVVM的区别和关系；同时阐述了有关函数式的概念；解释了ReactiveCocoa的工作原理，文章内容过于概念化，如果看不懂可以先收藏保存，看完之后的入门教程之后再回头阅读此文章大有助益&lt;br&gt;文章内容篇幅过多，所以没有将文章内实例代码一一使用swift编写；以后的教程中都将使用Swift语言进行编写&lt;br&gt;文章转载自 &lt;a href=&quot;http://yulingtianxia.com/blog/2015/05/21/ReactiveCocoa-and-MVVM-an-Introduction/&quot;&gt;玉令天下&lt;/a&gt;的博客 ；在此感谢&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="swift" scheme="http://blog.mog.name/categories/swift/"/>
    
    
      <category term="ReactiveCocoa" scheme="http://blog.mog.name/tags/ReactiveCocoa/"/>
    
      <category term="FP" scheme="http://blog.mog.name/tags/FP/"/>
    
      <category term="函数式编程" scheme="http://blog.mog.name/tags/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    
      <category term="MVC" scheme="http://blog.mog.name/tags/MVC/"/>
    
      <category term="MVVM" scheme="http://blog.mog.name/tags/MVVM/"/>
    
      <category term="View-Model" scheme="http://blog.mog.name/tags/View-Model/"/>
    
  </entry>
  
  <entry>
    <title>Alamofire上传图片</title>
    <link href="http://blog.mog.name/2016/05/15/Alamofire%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87/"/>
    <id>http://blog.mog.name/2016/05/15/Alamofire上传图片/</id>
    <published>2016-05-15T09:16:58.000Z</published>
    <updated>2016-05-15T09:28:16.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;IOS的网络请求中的GET、POST方法，以及文件或图片等资源的下载大家应该都很熟悉，但是可能有一部分盆友不知道如何上传文件，以及附带参数上传文件；&lt;br&gt;在OC中使用&lt;a href=&quot;https://github.com/AFNetworking/AFNetworking&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AFNetworking&lt;/a&gt;上传图片的资料在网上有很多，但是swift作为一门新的语言，相关的资料还很少；&lt;br&gt;这里我就给大家&lt;a href=&quot;https://github.com/Alamofire/Alamofire&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Alamofire&lt;/a&gt; 带参数上传图片的Demo（&lt;a href=&quot;https://github.com/Alamofire/Alamofire&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Alamofire&lt;/a&gt; 就是 Swift版的 &lt;a href=&quot;https://github.com/AFNetworking/AFNetworking&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AFNetworking&lt;/a&gt;）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;Alamofire 在文件上传时提供了简单的方法 upload，我们可以使用它完成文件上传功能&lt;/p&gt;
&lt;h3 id=&quot;客户端代码：&quot;&gt;&lt;a href=&quot;#客户端代码：&quot; class=&quot;headerlink&quot; title=&quot;客户端代码：&quot;&gt;&lt;/a&gt;客户端代码：&lt;/h3&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;开始上传&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; file = &lt;span class=&quot;type&quot;&gt;NSBundle&lt;/span&gt;.mainBundle().pathForResource(&lt;span class=&quot;string&quot;&gt;&quot;Mog&quot;&lt;/span&gt;, ofType: &lt;span class=&quot;string&quot;&gt;&quot;png&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; imageData = &lt;span class=&quot;type&quot;&gt;UIImagePNGRepresentation&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;UIImage&lt;/span&gt;(contentsOfFile: file!)!)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;Alamofire&lt;/span&gt;.upload(.&lt;span class=&quot;type&quot;&gt;POST&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;http://api.laravel.com/user/file&quot;&lt;/span&gt;, multipartFormData: &amp;#123; (data) &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             *   data: 图片， name: 服务器接收文件的参数名（判断是哪一张图片）, fileName: 服务器获取到图片的名称， mimeType： 文件类型&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            data.appendBodyPart(data: imageData!, name: &lt;span class=&quot;string&quot;&gt;&quot;file&quot;&lt;/span&gt;, fileName: &lt;span class=&quot;string&quot;&gt;&quot;fileasdsad&quot;&lt;/span&gt;, mimeType: &lt;span class=&quot;string&quot;&gt;&quot;image/*&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;//	 TO DO ...   这里传递更多参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;) &amp;#123; (result) &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;数据准备完成；&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; result &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; .&lt;span class=&quot;type&quot;&gt;Success&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; upload, &lt;span class=&quot;number&quot;&gt;_&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;_&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//                    case .Success(request: Request, streamingFromDisk: Bool, streamFileURL: NSURL?):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    upload.responseString(completionHandler: &amp;#123; (respone) &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(respone)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; .&lt;span class=&quot;type&quot;&gt;Failure&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; err):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(err)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;服务器代码&quot;&gt;&lt;a href=&quot;#服务器代码&quot; class=&quot;headerlink&quot; title=&quot;服务器代码&quot;&gt;&lt;/a&gt;服务器代码&lt;/h3&gt;&lt;p&gt;以php为例：&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//	 &#39;file&#39; 对应客户端的name字段名&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$file = &lt;span class=&quot;keyword&quot;&gt;isset&lt;/span&gt;($_FILES[&lt;span class=&quot;string&quot;&gt;&#39;file&#39;&lt;/span&gt;]) ? $_FILE[&lt;span class=&quot;string&quot;&gt;&#39;file&#39;&lt;/span&gt;] : &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;IOS的网络请求中的GET、POST方法，以及文件或图片等资源的下载大家应该都很熟悉，但是可能有一部分盆友不知道如何上传文件，以及附带参数上传文件；&lt;br&gt;在OC中使用&lt;a href=&quot;https://github.com/AFNetworking/AFNetworking&quot;&gt;AFNetworking&lt;/a&gt;上传图片的资料在网上有很多，但是swift作为一门新的语言，相关的资料还很少；&lt;br&gt;这里我就给大家&lt;a href=&quot;https://github.com/Alamofire/Alamofire&quot;&gt;Alamofire&lt;/a&gt; 带参数上传图片的Demo（&lt;a href=&quot;https://github.com/Alamofire/Alamofire&quot;&gt;Alamofire&lt;/a&gt; 就是 Swift版的 &lt;a href=&quot;https://github.com/AFNetworking/AFNetworking&quot;&gt;AFNetworking&lt;/a&gt;）。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="swift" scheme="http://blog.mog.name/categories/swift/"/>
    
    
      <category term="Alamofire" scheme="http://blog.mog.name/tags/Alamofire/"/>
    
      <category term="AFNetworking" scheme="http://blog.mog.name/tags/AFNetworking/"/>
    
  </entry>
  
</feed>
